load("dashboard_map_data.RData")
df <- make_map_base()[[2]]
scenarioCalc <- scenario(type = "All", use_new = TRUE)
scores <- select(scenarioCalc, "new_score", "spatial_id")
scoresAbs <- select(scenarioCalc, "new_scoreAbs", "spatial_id")
scoresBike <- select(scenarioCalc, "new_scoreBike", "spatial_id")
scoresDrive <- select(scenarioCalc, "new_scoreDrive", "spatial_id")
scoresTransit <- select(scenarioCalc, "new_scoreTransit", "spatial_id")
scoresWalk <- select(scenarioCalc, "new_scoreWalk", "spatial_id")
data.shape@data <- left_join(data.shape@data, scores, by = "spatial_id")  %>% left_join(df)
scoresAbs <- select(scenarioCalc, "new_scoreAbs", "spatial_id")
data.shape@data <- left_join(data.shape@data, scoresBike, by = "spatial_id") %>% left_join(df)
# Used for testing, this does allow data.shape to start with a clean slate each time.
load("dashboard_map_data.RData")
load("dashboard_map_data.RData")
df <- make_map_base()[[2]]
df <- select(df, 'spatial_id', 'name', 'VALUE0', 'FIPS', 'raw_score')
scenarioCalc <- scenario(type = "All", use_new = TRUE)
scores <- select(scenarioCalc, "new_score", "spatial_id")
scoresAbs <- select(scenarioCalc, "new_scoreAbs", "spatial_id")
scoresBike <- select(scenarioCalc, "new_scoreBike", "spatial_id")
scoresTransit <- select(scenarioCalc, "new_scoreTransit", "spatial_id")
scoresWalk <- select(scenarioCalc, "new_scoreWalk", "spatial_id")
scoresDrive <- select(scenarioCalc, "new_scoreDrive", "spatial_id")
data.shape@data <- left_join(data.shape@data, scores, by = "spatial_id")  %>% left_join(df)
data.shape@data <- left_join(data.shape@data, scoresAbs, by = "spatial_id") %>% left_join(df)
data.shape@data <- left_join(data.shape@data, scoresBike, by = "spatial_id") %>% left_join(df)
data.shape@data <- left_join(data.shape@data, scoresDrive, by = "spatial_id") %>% left_join(df)
data.shape@data <- left_join(data.shape@data, scoresTransit, by = "spatial_id") %>% left_join(df)
data.shape@data <- left_join(data.shape@data, scoresWalk, by = "spatial_id") %>% left_join(df)
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
rm(list = ls())
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
load(".RData")
source('scenario.R')
source('score_calc.R')
source("make_map.R")
source("make_map_base.R")
save.image(file= ".RData")
runApp()
runApp()
rm(list = ls())
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
load(".RData")
source('scenario.R')
source('score_calc.R')
source("make_map.R")
source("make_map_base.R")
save.image(file= ".RData")
runApp()
View(make_map)
rm(list = ls())
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
load(".RData")
source('scenario.R')
source('score_calc.R')
source("make_map.R")
source("make_map_base.R")
save.image(file= ".RData")
runApp()
ideal_data['atm', ideal_bike]
ideal_data['atm', "ideal_bike"]
ideal_data['atm']
select(ideal_data, 'atm')
View(ideal_data)
ideal_data[['atm']]
ideal_data['ideal_bike']
View(ideal_data)
ideal_data['ideal_bike', 'atm']
ideal_data[['ideal_bike', 'atm']]
ideal_data$ideal_bike
ideal_data$atm
rownames(ideal_data) <- df$type
which(ideal_data$type == 'atm')
which(ideal_data$type == 'atm')[1]
ideal_data$ideal_bike[which(ideal_data$type == 'atm')[1]]
rm(list = ls())
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
load(".RData")
source('scenario.R')
source('score_calc.R')
source("make_map.R")
source("make_map_base.R")
save.image(file= ".RData")
rm(list = ls())
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
source('scenario.R')
load(".RData")
source('score_calc.R')
source("make_map.R")
source("make_map_base.R")
save.image(file= ".RData")
runApp()
runApp()
load("dashboard_map_data.RData")
df <- make_map_base()[[2]]
df <- select(df, 'spatial_id', 'name', 'VALUE0', 'FIPS', 'raw_score')
scenarioCalc <- scenario(type = "All", use_new = TRUE)
rm(list = ls())
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
load(".RData")
# Load the weights
weights_url <- "https://docs.google.com/spreadsheets/d/18_XTChwbtd8dMn_7WDp_qXF6d_VXAhRexgjQTgJq0NY/"
weights <- gs_url(weights_url) %>% gs_read("Sheet1", range = "A1:R18")
row.names(weights) <- weights$type
parcel_proposals <- parcel_proposals %>% subset(select = -name)
parcel_proposals <- parcel_proposals %>% gather(num, type, -APN) %>% subset(select = -num)
parcel_proposals <- parcel_proposals[complete.cases(parcel_proposals$type),]
new_parcel_types <- unique(parcel_proposals$type)
# tk - For now I'm manually addressing types with scores of zero, should be able to come up with a better fix later.
new_parcel_types <- new_parcel_types[new_parcel_types != 'vacant']
type_counts <- unlist(lapply(new_parcel_types, function(p_type) return( nrow(parcel_proposals[parcel_proposals$type == p_type,]))))
names(type_counts) <- new_parcel_types
# temp_merged <- merged_data_parcels
# This is exactly what I needed.
temp_merged <- merged_data_parcels %>% full_join(parcel_proposals, by = c( "parcel" = "APN"))
temp_merged$rank <- NA
# Could use this if the above function doesn't work.
merged_data <- merged_data[,-which(names(merged_data) == "abs_good")]
merged_data <- weight_adder(merged_data, weights)
temp_merged <- weight_adder(temp_merged, weights)
temp_merged <- subset(temp_merged, select = -parcel) # >
temp_merged <- rbind(merged_data[,names(temp_merged)], temp_merged) # >
temp_merged <- temp_merged[order(temp_merged$spatial_id, temp_merged$type, temp_merged$crow_distance), ] # >
temp_merged <- temp_merged[complete.cases(temp_merged$crow_distance),] # >
# Duplicate row names seem to be throwing off the boolean indexing
row.names(temp_merged) <- 1:nrow(temp_merged)
# tk - eventually needs to change. I think this is fine because I'm using the current definitive lists.
temp_merged <- temp_merged %>% filter(spatial_id %in% biking$spatial_id) # >
# tk - drop the unwanted categories here?
temp_merged <- temp_merged[temp_merged$type != 'vacant', ]
temp_merged <- bind_rows(lapply(split.data.frame(temp_merged, f = temp_merged$spatial_id), type_splitter))
# Removing the NA ranks.
temp_merged <- temp_merged[complete.cases(temp_merged$rank),]
# temp_merged needs to get filter here
type <- "All"
if (type != "All"){
print("if statement entered")
# temp_merged <- filter(temp_merged, type == type)
temp_merged <- temp_merged[temp_merged$type == type,]
print(nrow(temp_merged))
}
#Delete below and use above
scoreCalc <- score_calc(temp_merged$time_biking, temp_merged$time_driving, temp_merged$time_transit, temp_merged$time_walking, temp_merged$abs_good, temp_merged$rank, temp_merged$type)
temp_merged$scores <- scoreCalc[[1]]
View(weights)
View(weights)
marg_bike    <- exp(time_biking*weights[type , 'marginal_bike'][[1]])
marg_bikeIdeal    <- exp(ideal_data$ideal_bike[which(ideal_data$type == type)[1]]*weights[type , 'marginal_bike'][[1]])
ideal_data$ideal_bike[which(ideal_data$type == type)[1]]
ideal_data$ideal_bike[which(ideal_data$type == 'atm)[1]]
ideal_data$ideal_bike[which(ideal_data$type == 'atm')[1]]
ideal_data$ideal_bike[which(ideal_data$type == 'atm')[1]]
ideal_data$ideal_bike[which(ideal_data$type == 'other')[1]]
rm(list = ls())
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
load(".RData")
# Load the weights
weights_url <- "https://docs.google.com/spreadsheets/d/18_XTChwbtd8dMn_7WDp_qXF6d_VXAhRexgjQTgJq0NY/"
weights <- gs_url(weights_url) %>% gs_read("Sheet1", range = "A1:R18")
parcel_proposals <- parcel_proposals %>% subset(select = -name)
parcel_proposals <- parcel_proposals %>% gather(num, type, -APN) %>% subset(select = -num)
parcel_proposals <- parcel_proposals[complete.cases(parcel_proposals$type),]
new_parcel_types <- unique(parcel_proposals$type)
row.names(weights) <- weights$type
# tk - For now I'm manually addressing types with scores of zero, should be able to come up with a better fix later.
new_parcel_types <- new_parcel_types[new_parcel_types != 'vacant']
type_counts <- unlist(lapply(new_parcel_types, function(p_type) return( nrow(parcel_proposals[parcel_proposals$type == p_type,]))))
names(type_counts) <- new_parcel_types
# temp_merged <- merged_data_parcels
# This is exactly what I needed.
temp_merged <- merged_data_parcels %>% full_join(parcel_proposals, by = c( "parcel" = "APN"))
temp_merged$rank <- NA
# Could use this if the above function doesn't work.
merged_data <- merged_data[,-which(names(merged_data) == "abs_good")]
merged_data <- weight_adder(merged_data, weights)
temp_merged <- weight_adder(temp_merged, weights)
temp_merged <- subset(temp_merged, select = -parcel) # >
temp_merged <- rbind(merged_data[,names(temp_merged)], temp_merged) # >
temp_merged <- temp_merged[order(temp_merged$spatial_id, temp_merged$type, temp_merged$crow_distance), ] # >
# tk - eventually needs to change. I think this is fine because I'm using the current definitive lists.
temp_merged <- temp_merged %>% filter(spatial_id %in% biking$spatial_id) # >
temp_merged <- temp_merged[complete.cases(temp_merged$crow_distance),] # >
# Duplicate row names seem to be throwing off the boolean indexing
row.names(temp_merged) <- 1:nrow(temp_merged)
# tk - drop the unwanted categories here?
temp_merged <- temp_merged[temp_merged$type != 'vacant', ]
# Removing the NA ranks.
temp_merged <- temp_merged[complete.cases(temp_merged$rank),]
temp_merged <- bind_rows(lapply(split.data.frame(temp_merged, f = temp_merged$spatial_id), type_splitter))
# temp_merged needs to get filter here
type <- "All"
if (type != "All"){
print("if statement entered")
# temp_merged <- filter(temp_merged, type == type)
temp_merged <- temp_merged[temp_merged$type == type,]
print(nrow(temp_merged))
}
#Delete below and use above
scoreCalc <- score_calc(temp_merged$time_biking, temp_merged$time_driving, temp_merged$time_transit, temp_merged$time_walking, temp_merged$abs_good, temp_merged$rank, temp_merged$type)
marg_bike    <- exp(temp_merged$time_biking*weights[type , 'marginal_bike'][[1]])
marg_bike    <- exp(temp_merged$time_biking[1]*weights[type , 'marginal_bike'][[1]])
marg_bike    <- exp(temp_merged$time_biking*weights[type , 'marginal_bike'][[1]])
marg_bike    <- exp(temp_merged$time_biking*weights[temp_merged$type , 'marginal_bike'][[1]])
score_calc(temp_merged$time_biking, temp_merged$time_driving, temp_merged$time_transit, temp_merged$time_walking, temp_merged$abs_good, temp_merged$rank, temp_merged$type)
#Delete below and use above
scoreCalc <- score_calc(temp_merged$time_biking, temp_merged$time_driving, temp_merged$time_transit, temp_merged$time_walking, temp_merged$abs_good, temp_merged$rank, temp_merged$type)
rm(list = ls())
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
load(".RData")
source('scenario.R')
source('score_calc.R')
source("make_map.R")
source("make_map_base.R")
save.image(file= ".RData")
rm(list = ls())
getwd()
# Load the weights
weights_url <- "https://docs.google.com/spreadsheets/d/18_XTChwbtd8dMn_7WDp_qXF6d_VXAhRexgjQTgJq0NY/"
weights <- gs_url(weights_url) %>% gs_read("Sheet1", range = "A1:R18")
parcel_proposals <- parcel_proposals[complete.cases(parcel_proposals$type),]
new_parcel_types <- unique(parcel_proposals$type)
parcel_proposals <- parcel_proposals %>% subset(select = -name)
load(".RData")
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
row.names(weights) <- weights$type
parcel_proposals <- parcel_proposals %>% gather(num, type, -APN) %>% subset(select = -num)
# tk - For now I'm manually addressing types with scores of zero, should be able to come up with a better fix later.
new_parcel_types <- new_parcel_types[new_parcel_types != 'vacant']
type_counts <- unlist(lapply(new_parcel_types, function(p_type) return( nrow(parcel_proposals[parcel_proposals$type == p_type,]))))
names(type_counts) <- new_parcel_types
# temp_merged <- merged_data_parcels
# This is exactly what I needed.
temp_merged <- merged_data_parcels %>% full_join(parcel_proposals, by = c( "parcel" = "APN"))
temp_merged$rank <- NA
# Could use this if the above function doesn't work.
merged_data <- merged_data[,-which(names(merged_data) == "abs_good")]
merged_data <- weight_adder(merged_data, weights)
temp_merged <- weight_adder(temp_merged, weights)
temp_merged <- subset(temp_merged, select = -parcel) # >
temp_merged <- rbind(merged_data[,names(temp_merged)], temp_merged) # >
temp_merged <- temp_merged[order(temp_merged$spatial_id, temp_merged$type, temp_merged$crow_distance), ] # >
# tk - eventually needs to change. I think this is fine because I'm using the current definitive lists.
temp_merged <- temp_merged %>% filter(spatial_id %in% biking$spatial_id) # >
temp_merged <- temp_merged[complete.cases(temp_merged$crow_distance),] # >
# Duplicate row names seem to be throwing off the boolean indexing
row.names(temp_merged) <- 1:nrow(temp_merged)
# tk - drop the unwanted categories here?
temp_merged <- temp_merged[temp_merged$type != 'vacant', ]
temp_merged <- bind_rows(lapply(split.data.frame(temp_merged, f = temp_merged$spatial_id), type_splitter))
# Removing the NA ranks.
temp_merged <- temp_merged[complete.cases(temp_merged$rank),]
# temp_merged needs to get filter here
type <- "All"
if (type != "All"){
print("if statement entered")
# temp_merged <- filter(temp_merged, type == type)
temp_merged <- temp_merged[temp_merged$type == type,]
print(nrow(temp_merged))
}
#Delete below and use above
scoreCalc <- score_calc(temp_merged$time_biking, temp_merged$time_driving, temp_merged$time_transit, temp_merged$time_walking, temp_merged$abs_good, temp_merged$rank, temp_merged$type)
ideal_data$ideal_bike[(which(ideal_data$type == "atm")[1])]
ideal_data$ideal_bike[(which(ideal_data$type == "atm")[1])]**weights['atm' , 'marginal_bike'][[1]]
ideal_data$ideal_bike[(which(ideal_data$type == "atm")[1])]*weights['atm' , 'marginal_bike'][[1]]
weights['atm' , 'marginal_bike']
weights$marginal_bike[which(weights$type == type]
weights$marginal_bike[which(weights$type == "atm")]
View(weights)
weights$marginal_bike[which(weights$type == "bank")]
View(ideal_data)
weights$marginal_bike[which(weights$type == "bank")][[1]]
rm(list = ls())
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
load(".RData")
source('scenario.R')
source('score_calc.R')
source("make_map.R")
source("make_map_base.R")
save.image(file= ".RData")
rm(list = ls())
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
# Load the weights
weights_url <- "https://docs.google.com/spreadsheets/d/18_XTChwbtd8dMn_7WDp_qXF6d_VXAhRexgjQTgJq0NY/"
row.names(weights) <- weights$type
parcel_proposals <- parcel_proposals %>% gather(num, type, -APN) %>% subset(select = -num)
parcel_proposals <- parcel_proposals[complete.cases(parcel_proposals$type),]
load(".RData")
new_parcel_types <- unique(parcel_proposals$type)
# tk - For now I'm manually addressing types with scores of zero, should be able to come up with a better fix later.
new_parcel_types <- new_parcel_types[new_parcel_types != 'vacant']
type_counts <- unlist(lapply(new_parcel_types, function(p_type) return( nrow(parcel_proposals[parcel_proposals$type == p_type,]))))
weights <- gs_url(weights_url) %>% gs_read("Sheet1", range = "A1:R18")
names(type_counts) <- new_parcel_types
merged_data <- weight_adder(merged_data, weights)
temp_merged <- subset(temp_merged, select = -parcel) # >
temp_merged <- rbind(merged_data[,names(temp_merged)], temp_merged) # >
temp_merged <- temp_merged[order(temp_merged$spatial_id, temp_merged$type, temp_merged$crow_distance), ] # >
# Duplicate row names seem to be throwing off the boolean indexing
row.names(temp_merged) <- 1:nrow(temp_merged)
# tk - drop the unwanted categories here?
temp_merged <- temp_merged[temp_merged$type != 'vacant', ]
temp_merged <- bind_rows(lapply(split.data.frame(temp_merged, f = temp_merged$spatial_id), type_splitter))
temp_merged <- temp_merged[complete.cases(temp_merged$crow_distance),] # >
temp_merged$rank <- NA
# temp_merged needs to get filter here
type <- "All"
if (type != "All"){
print("if statement entered")
# temp_merged <- filter(temp_merged, type == type)
temp_merged <- temp_merged[temp_merged$type == type,]
print(nrow(temp_merged))
}
# Could use this if the above function doesn't work.
merged_data <- merged_data[,-which(names(merged_data) == "abs_good")]
parcel_proposals <- parcel_proposals %>% subset(select = -name)
#Delete below and use above
scoreCalc <- score_calc(temp_merged$time_biking, temp_merged$time_driving, temp_merged$time_transit, temp_merged$time_walking, temp_merged$abs_good, temp_merged$rank, temp_merged$type)
temp_merged <- weight_adder(temp_merged, weights)
# Removing the NA ranks.
temp_merged <- temp_merged[complete.cases(temp_merged$rank),]
# tk - eventually needs to change. I think this is fine because I'm using the current definitive lists.
temp_merged <- temp_merged %>% filter(spatial_id %in% biking$spatial_id) # >
# temp_merged <- merged_data_parcels
# This is exactly what I needed.
temp_merged <- merged_data_parcels %>% full_join(parcel_proposals, by = c( "parcel" = "APN"))
rm(list = ls())
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
load(".RData")
# Load the weights
weights_url <- "https://docs.google.com/spreadsheets/d/18_XTChwbtd8dMn_7WDp_qXF6d_VXAhRexgjQTgJq0NY/"
weights <- gs_url(weights_url) %>% gs_read("Sheet1", range = "A1:R18")
row.names(weights) <- weights$type
parcel_proposals <- parcel_proposals %>% subset(select = -name)
parcel_proposals <- parcel_proposals %>% gather(num, type, -APN) %>% subset(select = -num)
parcel_proposals <- parcel_proposals[complete.cases(parcel_proposals$type),]
new_parcel_types <- unique(parcel_proposals$type)
# tk - For now I'm manually addressing types with scores of zero, should be able to come up with a better fix later.
new_parcel_types <- new_parcel_types[new_parcel_types != 'vacant']
type_counts <- unlist(lapply(new_parcel_types, function(p_type) return( nrow(parcel_proposals[parcel_proposals$type == p_type,]))))
names(type_counts) <- new_parcel_types
# temp_merged <- merged_data_parcels
# This is exactly what I needed.
temp_merged <- merged_data_parcels %>% full_join(parcel_proposals, by = c( "parcel" = "APN"))
temp_merged$rank <- NA
# Could use this if the above function doesn't work.
merged_data <- merged_data[,-which(names(merged_data) == "abs_good")]
merged_data <- weight_adder(merged_data, weights)
temp_merged <- weight_adder(temp_merged, weights)
temp_merged <- subset(temp_merged, select = -parcel) # >
temp_merged <- rbind(merged_data[,names(temp_merged)], temp_merged) # >
temp_merged <- temp_merged[order(temp_merged$spatial_id, temp_merged$type, temp_merged$crow_distance), ] # >
# tk - eventually needs to change. I think this is fine because I'm using the current definitive lists.
temp_merged <- temp_merged %>% filter(spatial_id %in% biking$spatial_id) # >
temp_merged <- temp_merged[complete.cases(temp_merged$crow_distance),] # >
# Duplicate row names seem to be throwing off the boolean indexing
row.names(temp_merged) <- 1:nrow(temp_merged)
# tk - drop the unwanted categories here?
temp_merged <- temp_merged[temp_merged$type != 'vacant', ]
temp_merged <- bind_rows(lapply(split.data.frame(temp_merged, f = temp_merged$spatial_id), type_splitter))
# Removing the NA ranks.
temp_merged <- temp_merged[complete.cases(temp_merged$rank),]
# temp_merged needs to get filter here
type <- "All"
if (type != "All"){
print("if statement entered")
# temp_merged <- filter(temp_merged, type == type)
temp_merged <- temp_merged[temp_merged$type == type,]
print(nrow(temp_merged))
}
#Delete below and use above
scoreCalc <- score_calc(temp_merged$time_biking, temp_merged$time_driving, temp_merged$time_transit, temp_merged$time_walking, temp_merged$abs_good, temp_merged$rank, temp_merged$type)
rm(list = ls())
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
load(".RData")
source('scenario.R')
source('score_calc.R')
source("make_map.R")
source("make_map_base.R")
save.image(file= ".RData")
rm(list = ls())
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
load(".RData")
# Load the weights
weights_url <- "https://docs.google.com/spreadsheets/d/18_XTChwbtd8dMn_7WDp_qXF6d_VXAhRexgjQTgJq0NY/"
weights <- gs_url(weights_url) %>% gs_read("Sheet1", range = "A1:R18")
parcel_proposals <- parcel_proposals %>% subset(select = -name)
parcel_proposals <- parcel_proposals %>% gather(num, type, -APN) %>% subset(select = -num)
row.names(weights) <- weights$type
parcel_proposals <- parcel_proposals[complete.cases(parcel_proposals$type),]
new_parcel_types <- unique(parcel_proposals$type)
# tk - For now I'm manually addressing types with scores of zero, should be able to come up with a better fix later.
new_parcel_types <- new_parcel_types[new_parcel_types != 'vacant']
type_counts <- unlist(lapply(new_parcel_types, function(p_type) return( nrow(parcel_proposals[parcel_proposals$type == p_type,]))))
names(type_counts) <- new_parcel_types
# temp_merged <- merged_data_parcels
# This is exactly what I needed.
temp_merged <- merged_data_parcels %>% full_join(parcel_proposals, by = c( "parcel" = "APN"))
temp_merged$rank <- NA
# Could use this if the above function doesn't work.
merged_data <- merged_data[,-which(names(merged_data) == "abs_good")]
merged_data <- weight_adder(merged_data, weights)
temp_merged <- weight_adder(temp_merged, weights)
temp_merged <- subset(temp_merged, select = -parcel) # >
temp_merged <- rbind(merged_data[,names(temp_merged)], temp_merged) # >
temp_merged <- temp_merged[order(temp_merged$spatial_id, temp_merged$type, temp_merged$crow_distance), ] # >
# tk - eventually needs to change. I think this is fine because I'm using the current definitive lists.
temp_merged <- temp_merged %>% filter(spatial_id %in% biking$spatial_id) # >
temp_merged <- temp_merged[complete.cases(temp_merged$crow_distance),] # >
# Duplicate row names seem to be throwing off the boolean indexing
row.names(temp_merged) <- 1:nrow(temp_merged)
# tk - drop the unwanted categories here?
temp_merged <- temp_merged[temp_merged$type != 'vacant', ]
temp_merged <- bind_rows(lapply(split.data.frame(temp_merged, f = temp_merged$spatial_id), type_splitter))
# Removing the NA ranks.
temp_merged <- temp_merged[complete.cases(temp_merged$rank),]
# temp_merged needs to get filter here
type <- "All"
if (type != "All"){
print("if statement entered")
# temp_merged <- filter(temp_merged, type == type)
temp_merged <- temp_merged[temp_merged$type == type,]
print(nrow(temp_merged))
}
#Delete below and use above
scoreCalc <- score_calc(temp_merged$time_biking, temp_merged$time_driving, temp_merged$time_transit, temp_merged$time_walking, temp_merged$abs_good, temp_merged$rank, temp_merged$type)
View(scoreCalc)
View(ideal_data)
View(weights)
names(weights)
names(weights$type)
unique(weights$type)
unique(ideal_data$type)
runApp()
rm(list = ls())
getwd()
load(".RData")
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
source('scenario.R')
source('score_calc.R')
source("make_map_base.R")
source("make_map.R")
save.image(file= ".RData")
runApp()
rm(list = ls())
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
load(".RData")
source('scenario.R')
source("make_map.R")
source("make_map_base.R")
save.image(file= ".RData")
source('score_calc.R')
runApp()
unique(weights$type)
unique(ideal_data$type)
ideal_data
unique(weights$type)
unique(ideal_data$type)
View(weights)
View(ideal_data)
View(ideal_data)
names(ideal_data)
ideal_dummy<-data.frame("other",10,10,10,10,10,10,10)
names(ideal_dummy)<-names(ideal_data)
newdf <- rbind(ideal_dummy, ideal_data)
View(newdf)
ideal_dummy<-data.frame("vacant",10,10,10,10,10,10,10)
names(ideal_dummy)<-names(ideal_data)
newdf <- rbind(ideal_dummy, newdf)
ideal_dummy<-data.frame("church",10,10,10,10,10,10,10)
names(ideal_dummy)<-names(ideal_data)
newdf <- rbind(ideal_dummy, newdf)
save.image(file= ".RData")
rm(list = ls())
getwd()
load(".RData")
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
source('scenario.R')
source('score_calc.R')
source("make_map_base.R")
source("make_map.R")
save.image(file= ".RData")
runApp()
rm(list = ls())
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
source('scenario.R')
source('score_calc.R')
source("make_map.R")
load(".RData")
source("make_map_base.R")
save.image(file= ".RData")
runApp()
rm(list = ls())
getwd()
setwd("C:/Users/jlund/Documents/GitHub/planning_dashboard_v2_updated-NEWBUTNOTWORKING/planning_dashboard_v2")
load(".RData")
